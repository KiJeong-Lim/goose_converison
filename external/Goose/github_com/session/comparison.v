(* autogenerated from command-line-arguments *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.

Definition Server := struct.decl [
  "Id" :: uint64T;
  "Data" :: uint64T;
  "VectorClock" :: slice.T uint64T
].

Definition ClientRequest := struct.decl [
  "OperationType" :: uint64T;
  "Data" :: uint64T;
  "ReadVector" :: slice.T uint64T;
  "WriteVector" :: slice.T uint64T
].

Definition ClientReply := struct.decl [
  "Succeeded" :: boolT;
  "OperationType" :: uint64T;
  "Data" :: uint64T
].

Definition compareVersionVector: val :=
  rec: "compareVersionVector" "v1" "v2" :=
    let: "output" := ref_to boolT #true in
    let: "i" := ref_to uint64T #0 in
    let: "l" := ref_to uint64T (slice.len "v1") in
    Skip;;
    (for: (λ: <>, (![uint64T] "i") < (![uint64T] "l")); (λ: <>, Skip) := λ: <>,
      (if: (SliceGet uint64T "v1" (![uint64T] "i")) < (SliceGet uint64T "v2" (![uint64T] "i"))
      then
        "output" <-[boolT] #false;;
        Break
      else
        "i" <-[uint64T] ((![uint64T] "i") + #1);;
        Continue));;
    ![boolT] "output".

Definition concurrentVersionVector: val :=
  rec: "concurrentVersionVector" "v1" "v2" :=
    (~ (compareVersionVector "v1" "v2")) && (~ (compareVersionVector "v2" "v1")).

Definition lexiographicCompare: val :=
  rec: "lexiographicCompare" "v1" "v2" :=
    let: "output" := ref_to boolT #true in
    let: "i" := ref_to uint64T #0 in
    let: "l" := ref_to uint64T (slice.len "v1") in
    Skip;;
    (for: (λ: <>, (![uint64T] "i") < (![uint64T] "l")); (λ: <>, Skip) := λ: <>,
      (if: (SliceGet uint64T "v1" (![uint64T] "i")) = (SliceGet uint64T "v2" (![uint64T] "i"))
      then
        "i" <-[uint64T] ((![uint64T] "i") + #1);;
        Continue
      else
        "output" <-[boolT] ((SliceGet uint64T "v1" (![uint64T] "i")) > (SliceGet uint64T "v2" (![uint64T] "i")));;
        Break));;
    ![boolT] "output".

Definition compareVersionVectorTotal: val :=
  rec: "compareVersionVectorTotal" "v1" "v2" :=
    (if: concurrentVersionVector "v1" "v2"
    then lexiographicCompare "v1" "v2"
    else compareVersionVector "v1" "v2").

Definition dependencyCheck: val :=
  rec: "dependencyCheck" "server" "request" :=
    (if: (struct.get ClientRequest "OperationType" "request") = #0
    then compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "ReadVector" "request")
    else
      (if: (struct.get ClientRequest "OperationType" "request") = #1
      then compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "ReadVector" "request")
      else
        (if: (struct.get ClientRequest "OperationType" "request") = #2
        then compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "WriteVector" "request")
        else
          (if: (struct.get ClientRequest "OperationType" "request") = #3
          then compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "WriteVector" "request")
          else
            (if: (struct.get ClientRequest "OperationType" "request") = #4
            then (compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "ReadVector" "request")) && (compareVersionVector (struct.get Server "VectorClock" "server") (struct.get ClientRequest "WriteVector" "request"))
            else
              Panic "Invalid Operation Number";;
              #()))))).

End code.
