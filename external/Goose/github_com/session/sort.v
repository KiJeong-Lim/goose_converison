(* autogenerated from command-line-arguments *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.

Definition BinarySearch: val :=
  rec: "BinarySearch" "s" "needle" :=
    let: "i" := ref_to uint64T #0 in
    let: "j" := ref_to uint64T (slice.len "s") in
    Skip;;
    (for: (λ: <>, (![uint64T] "i") < (![uint64T] "j")); (λ: <>, Skip) := λ: <>,
      let: "mid" := (![uint64T] "i") + (((![uint64T] "j") - (![uint64T] "i")) `quot` #2) in
      (if: (SliceGet uint64T "s" "mid") < "needle"
      then
        "i" <-[uint64T] ("mid" + #1);;
        Continue
      else
        "j" <-[uint64T] "mid";;
        Continue));;
    (if: (![uint64T] "i") < (slice.len "s")
    then (![uint64T] "i", (SliceGet uint64T "s" (![uint64T] "i")) = "needle")
    else (![uint64T] "i", #false)).

Definition sortedInsert: val :=
  rec: "sortedInsert" "s" "value" :=
    let: ("index", <>) := BinarySearch "s" "value" in
    (if: (slice.len "s") = "index"
    then SliceAppend uint64T "s" "value"
    else
      let: "right" := SliceAppendSlice uint64T (SliceSingleton "value") (SliceSkip uint64T "s" "index") in
      let: "result" := SliceAppendSlice uint64T (SliceTake "s" "index") "right" in
      "result").

End code.
